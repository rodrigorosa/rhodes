//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

/*
struct CGSize {
    double width;
    double height;
};
 */

#pragma mark -

//
// File: CoreSimulator
// UUID: B5E8FD2F-AECE-382D-BBD9-A68F5E88728E
//
//                           Arch: x86_64
//                Current version: 278.0.0
//          Compatibility version: 1.0.0
//                 Source version: 278.0.0.0.0
//       Minimum Mac OS X version: 10.11.0
//                    SDK version: 10.12.0
//
// Objective-C Garbage Collection: Unsupported
//
//                       Run path: @loader_path/Frameworks
//                               = /Frameworks
//

@protocol NSCoding
- (id)initWithCoder:(NSCoder *)arg1;
- (void)encodeWithCoder:(NSCoder *)arg1;
@end

@protocol NSObject
@property(readonly, copy) NSString *description;
@property(readonly) Class superclass;
@property(readonly) unsigned long long hash;
- (struct _NSZone *)zone;
- (unsigned long long)retainCount;
- (id)autorelease;
- (oneway void)release;
- (id)retain;
- (BOOL)respondsToSelector:(SEL)arg1;
- (BOOL)conformsToProtocol:(Protocol *)arg1;
- (BOOL)isMemberOfClass:(Class)arg1;
- (BOOL)isKindOfClass:(Class)arg1;
- (BOOL)isProxy;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2 withObject:(id)arg3;
- (id)performSelector:(SEL)arg1 withObject:(id)arg2;
- (id)performSelector:(SEL)arg1;
- (id)self;
- (Class)class;
- (BOOL)isEqual:(id)arg1;

@optional
@property(readonly, copy) NSString *debugDescription;
@end

@protocol NSPasteboardItemDataProvider <NSObject>
//- (void)pasteboard:(NSPasteboard *)arg1 item:(NSPasteboardItem *)arg2 provideDataForType:(NSString *)arg3;

@optional
//- (void)pasteboardFinishedWithDataProvider:(NSPasteboard *)arg1;
@end

@protocol NSSecureCoding <NSCoding>
+ (BOOL)supportsSecureCoding;
@end

@protocol SimDeviceNotifier
- (BOOL)unregisterNotificationHandler:(unsigned long long)arg1 error:(id *)arg2;
- (unsigned long long)registerNotificationHandlerOnQueue:(NSObject<OS_dispatch_queue> *)arg1 handler:(void (^)(NSDictionary *))arg2;
- (unsigned long long)registerNotificationHandler:(void (^)(NSDictionary *))arg1;
@end

@protocol SimPasteboard <SimDeviceNotifier>
@property(readonly, retain) NSArray *items;
@property(readonly) unsigned long long changeCount;
- (void)setPasteboardAsyncWithItems:(NSArray *)arg1 completionQueue:(NSObject<OS_dispatch_queue> *)arg2 completionHandler:(void (^)(unsigned long long, NSError *))arg3;
- (unsigned long long)setPasteboardWithItems:(NSArray *)arg1 error:(id *)arg2;
@end

@protocol SimPasteboardItemDataProvider <NSObject>
//- (NSObject<NSSecureCoding> *)retrieveValueForSimPasteboardItem:(SimPasteboardItem *)arg1 type:(NSString *)arg2;
@end

/*
@interface SimDevicePasteboard : NSObject <SimPasteboard>
{
    NSObject<OS_dispatch_queue> *_itemsQueue;
    unsigned long long _changeCount;
    NSArray *_items;
    SimDevice *_device;
    SimDevicePasteboardConnection *_pasteboardConnection;
    SimMachPortServer *_notificationServer;
    SimDeviceNotificationManager *_notificationManager;
    unsigned long long _registeredID;
    SimMachPortServer *_promisedDataServer;
}

@property(retain, nonatomic) SimMachPortServer *promisedDataServer; // @synthesize promisedDataServer=_promisedDataServer;
@property(nonatomic) unsigned long long registeredID; // @synthesize registeredID=_registeredID;
@property(retain, nonatomic) SimDeviceNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
@property(retain, nonatomic) SimMachPortServer *notificationServer; // @synthesize notificationServer=_notificationServer;
@property(retain, nonatomic) SimDevicePasteboardConnection *pasteboardConnection; // @synthesize pasteboardConnection=_pasteboardConnection;
@property(nonatomic) __weak SimDevice *device; // @synthesize device=_device;
@property(retain) NSArray *items; // @synthesize items=_items;
@property unsigned long long changeCount; // @synthesize changeCount=_changeCount;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *itemsQueue; // @synthesize itemsQueue=_itemsQueue;
- (void).cxx_destruct;
- (BOOL)unregisterNotificationHandler:(unsigned long long)arg1 error:(id *)arg2;
- (unsigned long long)registerNotificationHandlerOnQueue:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (unsigned long long)registerNotificationHandler:(CDUnknownBlockType)arg1;
- (unsigned long long)setPasteboardWithItems:(id)arg1 error:(id *)arg2;
- (void)setPasteboardAsyncWithItems:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)itemsFromPasteboardWithTypes:(id)arg1 error:(id *)arg2;
- (void)itemsFromPasteboardAsyncWithTypes:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)generateSimPasteboardItemsWithTypes:(id)arg1 changeCount:(unsigned long long)arg2;
- (void)setItems:(id)arg1 changeCount:(unsigned long long)arg2;
- (void)pasteboardHasChanged:(unsigned long long)arg1 itemsTypes:(id)arg2;
- (void)unsubscribe;
- (void)subscribe;
- (id)description;
- (void)registerSimDeviceNotificationListener;
- (void)dealloc;
- (id)initWithDevice:(id)arg1;

@end

 */
@interface SimDeviceNotificationManager : NSObject <SimDeviceNotifier>
{
    NSObject<OS_dispatch_queue> *_handlersQueue;
    NSMutableDictionary *_handlers;
    unsigned long long _next_regID;
    NSObject<OS_dispatch_queue> *_sendQueue;
}

@property(retain, nonatomic) NSObject<OS_dispatch_queue> *sendQueue; // @synthesize sendQueue=_sendQueue;
@property(nonatomic) unsigned long long next_regID; // @synthesize next_regID=_next_regID;
@property(retain, nonatomic) NSMutableDictionary *handlers; // @synthesize handlers=_handlers;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *handlersQueue; // @synthesize handlersQueue=_handlersQueue;
//- (void).cxx_destruct;
- (void)sendNotification:(id)arg1;
- (BOOL)unregisterNotificationHandler:(unsigned long long)arg1 error:(id *)arg2;
- (unsigned long long)registerNotificationHandlerOnQueue:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (unsigned long long)registerNotificationHandler:(CDUnknownBlockType)arg1;
- (id)init;

@end

@interface SimPasteboardPortMap : NSObject
{
    NSArray *_pasteboardItems;
    NSMutableDictionary *_portToProxyMap;
    NSObject<OS_dispatch_queue> *_concurrentQueue;
}

+ (id)sharedManager;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *concurrentQueue; // @synthesize concurrentQueue=_concurrentQueue;
@property(retain, nonatomic) NSMutableDictionary *portToProxyMap; // @synthesize portToProxyMap=_portToProxyMap;
@property(retain, nonatomic) NSArray *pasteboardItems; // @synthesize pasteboardItems=_pasteboardItems;
//- (void).cxx_destruct;
- (id)createPortKey:(unsigned int)arg1;
- (void)setValue:(id)arg1 forPort:(unsigned int)arg2;
- (id)lookupWith:(unsigned int)arg1;
- (id)description;
- (id)init;

@end

@interface SimPasteboardItemWrappedData : NSObject <NSSecureCoding>
{
    NSData *_wrappedData;
}

+ (BOOL)supportsSecureCoding;
@property(retain, nonatomic) NSData *wrappedData; // @synthesize wrappedData=_wrappedData;
//- (void).cxx_destruct;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithData:(id)arg1;
- (id)init;

@end

@interface SimPasteboardItemData : NSObject
{
    NSString *_type;
    NSObject<NSSecureCoding> *_value;
}

@property(retain, nonatomic) NSObject<NSSecureCoding> *value; // @synthesize value=_value;
@property(retain, nonatomic) NSString *type; // @synthesize type=_type;
//- (void).cxx_destruct;
- (id)initWithType:(id)arg1 value:(id)arg2;

@end

@interface SimPasteboardItem : NSObject <NSPasteboardItemDataProvider>
{
    long long nsPasteboardItemLazyInitOnce;
    BOOL _typesAllResolved;
    NSMutableDictionary *_dataDictionary;
    NSMutableArray *_preferredOrderedTypes;
    NSMapTable *_promisedDataTypes;
    //NSPasteboardItem *_nsPasteboardItem;
}

+ (id)itemFromNSPasteboardItem:(id)arg1 options:(id)arg2;
@property(nonatomic) BOOL typesAllResolved; // @synthesize typesAllResolved=_typesAllResolved;
//@property(retain, nonatomic) NSPasteboardItem *nsPasteboardItem; // @synthesize nsPasteboardItem=_nsPasteboardItem;
@property(retain, nonatomic) NSMapTable *promisedDataTypes; // @synthesize promisedDataTypes=_promisedDataTypes;
@property(retain, nonatomic) NSMutableArray *preferredOrderedTypes; // @synthesize preferredOrderedTypes=_preferredOrderedTypes;
@property(retain, nonatomic) NSMutableDictionary *dataDictionary; // @synthesize dataDictionary=_dataDictionary;
//- (void).cxx_destruct;
- (void)resolveAllTypes;
- (void)pasteboard:(id)arg1 item:(id)arg2 provideDataForType:(id)arg3;
//@property(readonly, copy) NSPasteboardItem *nsPasteboardRepresentation;
@property(readonly, copy) NSArray *types;
- (id)valueForType:(id)arg1;
- (BOOL)setValue:(id)arg1 forType:(id)arg2;
- (BOOL)setDataProvider:(id)arg1 forTypes:(id)arg2;
@property(readonly, copy) NSString *description;
- (id)init;
@property(readonly, copy, nonatomic) NSArray *internalRepresentation;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SimNSPasteboardItem : SimPasteboardItem <SimPasteboardItemDataProvider>
{
}

- (id)retrieveValueForSimPasteboardItem:(id)arg1 type:(id)arg2;
- (id)nsPasteboardRepresentation;
- (id)initWithNSPasteboardItem:(id)arg1 resolvedCount:(long long)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SimDevicePasteboardItem : SimPasteboardItem <SimPasteboardItemDataProvider>
{
//    long long nsPasteboardItemLazyInitOnce;
//    SimDevicePasteboardConnection *_connection;
    unsigned long long _pasteboardChangeCount;
    unsigned long long _pasteboardItemIndex;
}

@property(nonatomic) unsigned long long pasteboardItemIndex; // @synthesize pasteboardItemIndex=_pasteboardItemIndex;
@property(nonatomic) unsigned long long pasteboardChangeCount; // @synthesize pasteboardChangeCount=_pasteboardChangeCount;
//@property(retain, nonatomic) SimDevicePasteboardConnection *connection; // @synthesize connection=_connection;
//- (void).cxx_destruct;
- (id)transformValueWithType:(id)arg1 value:(id)arg2;
- (void)pasteboard:(id)arg1 item:(id)arg2 provideDataForType:(id)arg3;
- (id)retrieveValueForSimPasteboardItem:(id)arg1 type:(id)arg2;
- (id)nsPasteboardRepresentation;
- (id)initWithConnection:(id)arg1 changeCount:(unsigned long long)arg2 itemIndex:(unsigned long long)arg3 itemData:(id)arg4;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

@interface SimMachPortServer : NSObject
{
    NSMachPort *_port;
    NSString *_name;
    NSObject<OS_dispatch_queue> *_serverQueue;
    NSObject<OS_dispatch_source> *_serverSource;
}

@property(retain, nonatomic) NSObject<OS_dispatch_source> *serverSource; // @synthesize serverSource=_serverSource;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serverQueue; // @synthesize serverQueue=_serverQueue;
@property(readonly, retain, nonatomic) NSString *name; // @synthesize name=_name;
@property(readonly, retain, nonatomic) NSMachPort *port; // @synthesize port=_port;
//- (void).cxx_destruct;
- (id)description;
- (id)initWithName:(id)arg1 machMessageHandler:(CDUnknownFunctionPointerType)arg2 machMessageSize:(unsigned int)arg3 error:(id *)arg4;

@end

@interface SimServiceContext : NSObject
{
    NSMutableArray *_supportedDeviceTypes;
    NSMutableDictionary *_supportedDeviceTypesByIdentifier;
    NSMutableDictionary *_supportedDeviceTypesByAlias;
    NSMutableArray *_supportedRuntimes;
    NSMutableDictionary *_supportedRuntimesByIdentifier;
    NSMutableDictionary *_supportedRuntimesByAlias;
    NSString *_developerDir;
    NSMutableDictionary *_allDeviceSets;
    BOOL _initialized;
    long long _connectionType;
    NSObject<OS_xpc_object> *_serviceConnection;
    NSObject<OS_dispatch_queue> *_serviceConnectionQueue;
    NSDate *_lastConnectionTime;
//    SimProfilesPathMonitor *_profileMonitor;
    NSObject<OS_dispatch_queue> *_profileQueue;
    NSObject<OS_dispatch_queue> *_allDeviceSetsQueue;
}

+ (void)setSharedContextConnectionType:(long long)arg1;
+ (id)simContextWithConnectionType:(long long)arg1;
+ (id)sharedServiceContext;
+ (id)serviceContextForDeveloperDir:(id)arg1 connectionType:(long long)arg2 error:(id *)arg3;
+ (id)sharedServiceContextForDeveloperDir:(id)arg1 error:(id *)arg2;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *allDeviceSetsQueue; // @synthesize allDeviceSetsQueue=_allDeviceSetsQueue;
@property(nonatomic) BOOL initialized; // @synthesize initialized=_initialized;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *profileQueue; // @synthesize profileQueue=_profileQueue;
//@property(retain, nonatomic) SimProfilesPathMonitor *profileMonitor; // @synthesize profileMonitor=_profileMonitor;
@property(retain, nonatomic) NSDate *lastConnectionTime; // @synthesize lastConnectionTime=_lastConnectionTime;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *serviceConnectionQueue; // @synthesize serviceConnectionQueue=_serviceConnectionQueue;
@property(retain, nonatomic) NSObject<OS_xpc_object> *serviceConnection; // @synthesize serviceConnection=_serviceConnection;
@property(copy, nonatomic) NSString *developerDir; // @synthesize developerDir=_developerDir;
@property(nonatomic) long long connectionType; // @synthesize connectionType=_connectionType;
//- (void).cxx_destruct;
- (void)handleXPCEvent:(id)arg1;
- (void)handleReconnectionBookkeeping;
- (void)_supportedRuntimesScanPath:(id)arg1;
- (void)_supportedDeviceTypesScanPath:(id)arg1;
- (void)supportedRuntimesAddProfilesAtPath:(id)arg1;
- (void)supportedDeviceTypesAddProfilesAtPath:(id)arg1;
- (void)serviceAddProfilesAtPath:(id)arg1;
- (void)addProfilesAtPath:(id)arg1;
@property(readonly, nonatomic) NSDictionary *supportedRuntimesByAlias;
@property(readonly, nonatomic) NSDictionary *supportedRuntimesByIdentifier;
@property(readonly, nonatomic) NSArray *bundledRuntimes;
@property(readonly, nonatomic) NSArray *supportedRuntimes;
@property(readonly, nonatomic) NSDictionary *supportedDeviceTypesByAlias;
@property(readonly, nonatomic) NSDictionary *supportedDeviceTypesByIdentifier;
@property(readonly, nonatomic) NSArray *bundledDeviceTypes;
@property(readonly, nonatomic) NSArray *supportedDeviceTypes;
- (id)allDeviceSets;
- (id)deviceSetWithPath:(id)arg1 error:(id *)arg2;
- (id)defaultDeviceSetWithError:(id *)arg1;
- (void)dealloc;
- (void)connect;
- (BOOL)loadServiceWithError:(id *)arg1;
- (void)removeOtherCoreSimulatorServiceJobs;
- (id)initWithDeveloperDir:(id)arg1 connectionType:(long long)arg2;
- (id)init;

@end

@interface SimDevice : NSObject <SimDeviceNotifier>
{
    unsigned long long _state;
    NSString *_name;
    NSString *_runtimeIdentifier;
    NSMutableDictionary *_headServicePorts;
    NSString *_deviceTypeIdentifier;
    NSUUID *_UDID;
//    SimDevicePasteboard *_pasteboard;
    SimDeviceSet *_deviceSet;
    SimDeviceNotificationManager *_notificationManager;
    NSObject<OS_dispatch_queue> *_bootstrapQueue;
    NSMutableDictionary *_registeredServices;
    NSObject<OS_dispatch_queue> *_stateVariableQueue;
    NSMachPort *_deathTriggerPort;
    NSMachPort *_hostSupportPort;
    unsigned long long _pasteboardNotificationRegistrationID;
    NSMutableArray *_darwinNotificationTokens;
    NSDictionary *_bootEnvironmentExtra;
}

+ (BOOL)supportsFeature:(id)arg1 deviceType:(id)arg2 runtime:(id)arg3;
+ (BOOL)isValidState:(unsigned long long)arg1;
+ (id)simDevice:(id)arg1 UDID:(id)arg2 deviceTypeIdentifier:(id)arg3 runtimeIdentifier:(id)arg4 state:(unsigned long long)arg5 deviceSet:(id)arg6;
+ (id)simDeviceAtPath:(id)arg1 deviceSet:(id)arg2;
+ (id)createDeviceWithName:(id)arg1 deviceSet:(id)arg2 deviceType:(id)arg3 runtime:(id)arg4 initialDataPath:(id)arg5;
@property(copy, nonatomic) NSDictionary *bootEnvironmentExtra; // @synthesize bootEnvironmentExtra=_bootEnvironmentExtra;
@property(retain, nonatomic) NSMutableArray *darwinNotificationTokens; // @synthesize darwinNotificationTokens=_darwinNotificationTokens;
@property(nonatomic) unsigned long long pasteboardNotificationRegistrationID; // @synthesize pasteboardNotificationRegistrationID=_pasteboardNotificationRegistrationID;
@property(retain, nonatomic) NSMachPort *hostSupportPort; // @synthesize hostSupportPort=_hostSupportPort;
@property(retain, nonatomic) NSMachPort *deathTriggerPort; // @synthesize deathTriggerPort=_deathTriggerPort;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *stateVariableQueue; // @synthesize stateVariableQueue=_stateVariableQueue;
@property(retain, nonatomic) NSMutableDictionary *registeredServices; // @synthesize registeredServices=_registeredServices;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *bootstrapQueue; // @synthesize bootstrapQueue=_bootstrapQueue;
@property(retain, nonatomic) SimDeviceNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
@property(nonatomic) __weak SimDeviceSet *deviceSet; // @synthesize deviceSet=_deviceSet;
//@property(retain, nonatomic) SimDevicePasteboard *pasteboard; // @synthesize pasteboard=_pasteboard;
@property(copy, nonatomic) NSUUID *UDID; // @synthesize UDID=_UDID;
@property(copy, nonatomic) NSString *deviceTypeIdentifier; // @synthesize deviceTypeIdentifier=_deviceTypeIdentifier;
//- (void).cxx_destruct;
- (id)portForServiceNamed:(id)arg1 error:(id *)arg2;
- (void)registerHeadServicePorts;
@property(readonly, nonatomic) NSMutableDictionary *headServicePorts; // @synthesize headServicePorts=_headServicePorts;
- (BOOL)isAvailableWithError:(id *)arg1;
@property(readonly) BOOL available;
- (BOOL)syncUnpairedDevicesWithError:(id *)arg1;
- (BOOL)triggerCloudSyncWithError:(id *)arg1;
- (void)triggerCloudSyncWithCompletionHandler:(CDUnknownBlockType)arg1;
- (BOOL)darwinNotificationSetState:(unsigned long long)arg1 name:(id)arg2 error:(id *)arg3;
- (BOOL)darwinNotificationGetState:(unsigned long long *)arg1 name:(id)arg2 error:(id *)arg3;
- (BOOL)postDarwinNotification:(id)arg1 error:(id *)arg2;
- (void)terminateApplicationWithID:(id)arg1 error:(id *)arg2;
- (int)launchApplicationWithID:(id)arg1 options:(id)arg2 error:(id *)arg3;
- (void)launchApplicationAsyncWithID:(id)arg1 options:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)launchApplicationAsyncWithID:(id)arg1 options:(id)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (id)installedAppsWithError:(id *)arg1;
- (id)propertiesOfApplication:(id)arg1 error:(id *)arg2;
- (BOOL)applicationIsInstalled:(id)arg1 type:(id *)arg2 error:(id *)arg3;
- (BOOL)uninstallApplication:(id)arg1 withOptions:(id)arg2 error:(id *)arg3;
- (BOOL)installApplication:(id)arg1 withOptions:(id)arg2 error:(id *)arg3;
- (BOOL)setKeyboardLanguage:(id)arg1 error:(id *)arg2;
- (BOOL)addVideo:(id)arg1 error:(id *)arg2;
- (BOOL)addPhoto:(id)arg1 error:(id *)arg2;
- (BOOL)openURL:(id)arg1 error:(id *)arg2;
- (long long)compare:(id)arg1;
- (id)newDeviceNotification;
- (id)createXPCNotification:(const char *)arg1;
- (id)createXPCRequest:(const char *)arg1;
- (void)handleXPCRequestSpawn:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestGetenv:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestLookup:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestUnregister:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestRegister:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestRestore:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestErase:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestUpgrade:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestShutdown:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestBoot:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestRename:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequest:(id)arg1 peer:(id)arg2;
- (void)handleXPCNotificationDeviceRuntimeChanged:(id)arg1;
- (void)handleXPCNotificationDeviceRenamed:(id)arg1;
- (void)handleXPCNotificationDeviceStateChanged:(id)arg1;
- (void)handleXPCNotification:(id)arg1;
- (void)setRuntimeIdentifier:(id)arg1;
@property(readonly, copy, nonatomic) NSString *runtimeIdentifier;
- (void)setName:(id)arg1;
@property(readonly, copy, nonatomic) NSString *name;
- (void)setState:(unsigned long long)arg1;
@property(readonly, nonatomic) unsigned long long state;
- (id)stateString;
- (BOOL)unregisterNotificationHandler:(unsigned long long)arg1 error:(id *)arg2;
- (unsigned long long)registerNotificationHandlerOnQueue:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (unsigned long long)registerNotificationHandler:(CDUnknownBlockType)arg1;
- (void)simulateMemoryWarning;
- (id)memoryWarningFilePath;
@property(readonly, copy, nonatomic) NSString *logPath;
- (id)dataPath;
- (id)devicePath;
- (id)environment;
- (int)_spawnFromSelfWithPath:(id)arg1 options:(id)arg2 terminationQueue:(id)arg3 terminationHandler:(CDUnknownBlockType)arg4 error:(id *)arg5;
- (int)_spawnFromLaunchdWithPath:(id)arg1 options:(id)arg2 terminationQueue:(id)arg3 terminationHandler:(CDUnknownBlockType)arg4 error:(id *)arg5;
- (int)spawnWithPath:(id)arg1 options:(id)arg2 terminationQueue:(id)arg3 terminationHandler:(CDUnknownBlockType)arg4 error:(id *)arg5;
- (int)spawnWithPath:(id)arg1 options:(id)arg2 terminationHandler:(CDUnknownBlockType)arg3 error:(id *)arg4;
- (void)spawnAsyncWithPath:(id)arg1 options:(id)arg2 terminationHandler:(CDUnknownBlockType)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)spawnAsyncWithPath:(id)arg1 options:(id)arg2 terminationQueue:(id)arg3 terminationHandler:(CDUnknownBlockType)arg4 completionQueue:(id)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (BOOL)unregisterService:(id)arg1 error:(id *)arg2;
- (BOOL)registerPort:(unsigned int)arg1 service:(id)arg2 error:(id *)arg3;
- (unsigned int)lookup:(id)arg1 error:(id *)arg2;
- (unsigned int)_lookup:(id)arg1 error:(id *)arg2;
- (id)getenv:(id)arg1 error:(id *)arg2;
- (BOOL)restoreContentsAndSettingsFromDevice:(id)arg1 error:(id *)arg2;
- (void)restoreContentsAndSettingsAsyncFromDevice:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)restoreContentsAndSettingsAsyncFromDevice:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (BOOL)eraseContentsAndSettingsWithError:(id *)arg1;
- (BOOL)_bq_eraseContentsAndSettingsUsingInitialDataPath:(id)arg1 error:(id *)arg2;
- (void)eraseContentsAndSettingsAsyncWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)eraseContentsAndSettingsAsyncWithCompletionHandler:(CDUnknownBlockType)arg1;
- (BOOL)upgradeToRuntime:(id)arg1 error:(id *)arg2;
- (void)upgradeAsyncToRuntime:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (BOOL)rename:(id)arg1 error:(id *)arg2;
- (void)renameAsync:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)renameAsync:(id)arg1 completionQueue:(id)arg2 completetionHandler:(CDUnknownBlockType)arg3;
- (BOOL)shutdownWithError:(id *)arg1;
- (BOOL)_shutdownWithError:(id *)arg1;
- (void)shutdownAsyncWithCompletionHandler:(CDUnknownBlockType)arg1;
- (void)shutdownAsyncWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)_bootWithOptions:(id)arg1 deathMonitorPort:(id)arg2 deathTriggerPort:(id)arg3 error:(id *)arg4;
- (BOOL)bootWithOptions:(id)arg1 error:(id *)arg2;
- (void)bootAsyncWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)bootAsyncWithOptions:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)launchdDeathHandlerWithDeathPort:(id)arg1;
- (BOOL)startLaunchdWithDeathPort:(id)arg1 deathHandler:(CDUnknownBlockType)arg2 error:(id *)arg3;
- (void)registerPortsWithLaunchd;
@property(readonly, nonatomic) NSArray *launchDaemonsPaths;
- (BOOL)removeLaunchdJobWithError:(id *)arg1;
- (BOOL)createLaunchdJobWithError:(id *)arg1 extraEnvironment:(id)arg2 disabledJobs:(id)arg3;
- (BOOL)createDarwinNotificationProxiesWithError:(id *)arg1;
- (BOOL)createDarwinNotificationProxy:(id)arg1 toSimAs:(id)arg2 withState:(BOOL)arg3 error:(id *)arg4;
- (BOOL)clearTmpWithError:(id *)arg1;
- (BOOL)ensureLogPathsWithError:(id *)arg1;
- (BOOL)supportsFeature:(id)arg1;
@property(readonly, copy, nonatomic) NSString *launchdJobName;
- (void)saveToDisk;
- (id)saveStateDict;
- (void)validateAndFixStateUsingInitialDataPath:(id)arg1;
@property(readonly, retain, nonatomic) SimRuntime *runtime;
@property(readonly, retain, nonatomic) SimDeviceType *deviceType;
@property(readonly, copy, nonatomic) NSString *descriptiveName;
- (id)description;
- (void)dealloc;
- (id)initDevice:(id)arg1 UDID:(id)arg2 deviceTypeIdentifier:(id)arg3 runtimeIdentifier:(id)arg4 state:(unsigned long long)arg5 initialDataPath:(id)arg6 deviceSet:(id)arg7;
- (BOOL)unpairIDSRelayWithDevice:(id)arg1 error:(id *)arg2;
- (BOOL)setActiveIDSRelayDevice:(id)arg1 error:(id *)arg2;
- (BOOL)disconnectIDSRelayToDevice:(id)arg1 error:(id *)arg2;
- (BOOL)connectIDSRelayToDevice:(id)arg1 disconnectMonitorPort:(unsigned int *)arg2 error:(id *)arg3;

@end

@interface SimLocalThrowable : NSObject
{
    id _data;
}

+ (id)throwableWithData:(id)arg1;
@property(retain, nonatomic) id data; // @synthesize data=_data;
//- (void).cxx_destruct;
- (id)initWithData:(id)arg1;
- (id)init;

@end

@interface SimDeviceType : NSObject
{
    BOOL _isXcodeBundled;
    float _mainScreenScale;
    unsigned int _minRuntimeVersion;
    unsigned int _maxRuntimeVersion;
    unsigned int _minCoreSimulatorFrameworkVersion;
    unsigned int _maxCoreSimulatorFrameworkVersion;
    NSString *_name;
    NSString *_identifier;
    NSString *_modelIdentifier;
    NSBundle *_bundle;
    NSArray *_supportedArchs;
    NSArray *_supportedProductFamilyIDs;
    NSDictionary *_capabilities;
    NSString *_springBoardConfigName;
    NSString *_productClass;
    NSDictionary *_environment_extra;
    NSDictionary *_aliases;
    NSDictionary *_supportedFeatures;
    NSDictionary *_supportedFeaturesConditionalOnRuntime;
    struct CGSize _mainScreenSize;
    struct CGSize _mainScreenDPI;
}

+ (id)supportedDeviceTypesByAlias;
+ (id)supportedDeviceTypesByIdentifier;
+ (id)supportedDeviceTypes;
+ (id)supportedDevices;
@property(nonatomic) BOOL isXcodeBundled; // @synthesize isXcodeBundled=_isXcodeBundled;
@property(copy, nonatomic) NSDictionary *supportedFeaturesConditionalOnRuntime; // @synthesize supportedFeaturesConditionalOnRuntime=_supportedFeaturesConditionalOnRuntime;
@property(copy, nonatomic) NSDictionary *supportedFeatures; // @synthesize supportedFeatures=_supportedFeatures;
@property(copy, nonatomic) NSDictionary *aliases; // @synthesize aliases=_aliases;
@property(copy, nonatomic) NSDictionary *environment_extra; // @synthesize environment_extra=_environment_extra;
@property(copy, nonatomic) NSString *productClass; // @synthesize productClass=_productClass;
@property(copy, nonatomic) NSString *springBoardConfigName; // @synthesize springBoardConfigName=_springBoardConfigName;
@property(nonatomic) unsigned int maxCoreSimulatorFrameworkVersion; // @synthesize maxCoreSimulatorFrameworkVersion=_maxCoreSimulatorFrameworkVersion;
@property(nonatomic) unsigned int minCoreSimulatorFrameworkVersion; // @synthesize minCoreSimulatorFrameworkVersion=_minCoreSimulatorFrameworkVersion;
@property(nonatomic) unsigned int maxRuntimeVersion; // @synthesize maxRuntimeVersion=_maxRuntimeVersion;
@property(nonatomic) unsigned int minRuntimeVersion; // @synthesize minRuntimeVersion=_minRuntimeVersion;
@property(nonatomic) struct CGSize mainScreenDPI; // @synthesize mainScreenDPI=_mainScreenDPI;
@property(nonatomic) struct CGSize mainScreenSize; // @synthesize mainScreenSize=_mainScreenSize;
@property(copy, nonatomic) NSDictionary *capabilities; // @synthesize capabilities=_capabilities;
@property(nonatomic) float mainScreenScale; // @synthesize mainScreenScale=_mainScreenScale;
@property(copy, nonatomic) NSArray *supportedProductFamilyIDs; // @synthesize supportedProductFamilyIDs=_supportedProductFamilyIDs;
@property(copy, nonatomic) NSArray *supportedArchs; // @synthesize supportedArchs=_supportedArchs;
@property(retain, nonatomic) NSBundle *bundle; // @synthesize bundle=_bundle;
@property(copy, nonatomic) NSString *modelIdentifier; // @synthesize modelIdentifier=_modelIdentifier;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
//- (void).cxx_destruct;
- (Class)deviceClass;
- (long long)compare:(id)arg1;
- (BOOL)supportsFeatureConditionally:(id)arg1;
- (BOOL)supportsFeature:(id)arg1;
- (id)environment;
@property(readonly, copy, nonatomic) NSString *productFamily;
@property(readonly, nonatomic) int productFamilyID;
- (id)description;
- (id)initWithBundle:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)init;

@end

@interface SimDeviceSet : NSObject <SimDeviceNotifier>
{
    NSString *_setPath;
    NSObject<OS_dispatch_queue> *_devicesQueue;
    NSMutableDictionary *__devicesByUDID;
    NSMutableDictionary *_devicesNotificationRegIDs;
    NSMutableDictionary *__devicePairsByUUID;
    NSMutableDictionary *_devicePairsNotificationRegIDs;
    SimServiceContext *_serviceContext;
    SimDeviceNotificationManager *_notificationManager;
    NSDictionary *_defaultCreatedDevices;
}

+ (id)setForSetPath:(id)arg1 serviceContext:(id)arg2;
+ (id)setForSetPath:(id)arg1;
+ (id)defaultSet;
+ (id)defaultSetPath;
@property(retain, nonatomic) NSDictionary *defaultCreatedDevices; // @synthesize defaultCreatedDevices=_defaultCreatedDevices;
@property(retain, nonatomic) SimDeviceNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
@property(retain, nonatomic) SimServiceContext *serviceContext; // @synthesize serviceContext=_serviceContext;
@property(retain, nonatomic) NSMutableDictionary *devicePairsNotificationRegIDs; // @synthesize devicePairsNotificationRegIDs=_devicePairsNotificationRegIDs;
@property(retain, nonatomic) NSMutableDictionary *_devicePairsByUUID; // @synthesize _devicePairsByUUID=__devicePairsByUUID;
@property(retain, nonatomic) NSMutableDictionary *devicesNotificationRegIDs; // @synthesize devicesNotificationRegIDs=_devicesNotificationRegIDs;
@property(retain, nonatomic) NSMutableDictionary *_devicesByUDID; // @synthesize _devicesByUDID=__devicesByUDID;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *devicesQueue; // @synthesize devicesQueue=_devicesQueue;
@property(copy, nonatomic) NSString *setPath; // @synthesize setPath=_setPath;
//- (void).cxx_destruct;
- (void)handleXPCRequestUnpair:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestPair:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequestDeleteDevice:(id)arg1 peer:(id)arg2 device:(id)arg3;
- (void)handleXPCRequestCloneDevice:(id)arg1 peer:(id)arg2 device:(id)arg3;
- (void)handleXPCRequestCreateDevice:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequest:(id)arg1 peer:(id)arg2;
- (void)handleXPCNotificationDevicePairRemoved:(id)arg1;
- (void)handleXPCNotificationDevicePairAdded:(id)arg1;
- (void)handleXPCNotificationDeviceRemoved:(id)arg1;
- (void)handleXPCNotificationDeviceAdded:(id)arg1;
- (void)handleXPCNotification:(id)arg1;
- (BOOL)unpairDevicePair:(id)arg1 error:(id *)arg2;
- (void)unpairDevicePairAsync:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (void)unpairDevicePairAsync:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)createDevicePairWithGizmo:(id)arg1 companion:(id)arg2 error:(id *)arg3;
- (void)createDevicePairAsyncWithGizmo:(id)arg1 companion:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)createDevicePairAsyncWithGizmo:(id)arg1 companion:(id)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (BOOL)testDevicePairingBetweenGizmo:(id)arg1 companion:(id)arg2 error:(id *)arg3;
- (BOOL)deleteDevice:(id)arg1 error:(id *)arg2;
- (void)deleteDeviceAsync:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (id)cloneDevice:(id)arg1 name:(id)arg2 error:(id *)arg3;
- (void)cloneDeviceAsync:(id)arg1 name:(id)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (void)deleteDeviceAsync:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (id)createDeviceWithType:(id)arg1 runtime:(id)arg2 name:(id)arg3 error:(id *)arg4;
- (void)createDeviceAsyncWithType:(id)arg1 runtime:(id)arg2 name:(id)arg3 completionQueue:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;
- (void)createDeviceAsyncWithType:(id)arg1 runtime:(id)arg2 name:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;
- (BOOL)unregisterNotificationHandler:(unsigned long long)arg1 error:(id *)arg2;
- (void)sendNotification:(id)arg1;
- (unsigned long long)registerNotificationHandlerOnQueue:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (unsigned long long)registerNotificationHandler:(CDUnknownBlockType)arg1;
- (void)removeDevicePairAsync:(id)arg1;
- (void)addDevicePair:(id)arg1;
- (void)addDevicePairAsync:(id)arg1;
- (void)removeDeviceAsync:(id)arg1;
- (void)addDevice:(id)arg1;
- (void)addDeviceAsync:(id)arg1;
- (void)updateDefaultDevicePairingsToBundledRuntimes;
- (void)updateDefaultDevices;
- (id)devicePairsContainingDevice:(id)arg1;
- (id)devicePairsContainingDeviceUDID:(id)arg1;
@property(readonly, copy) NSArray *availableDevicePairs;
@property(readonly, copy) NSArray *devicePairs;
@property(readonly, copy) NSDictionary *devicePairsByUUID;
@property(readonly, copy) NSArray *availableDevices;
@property(readonly, copy) NSArray *devices;
- (BOOL)isDeviceInSet:(id)arg1;
@property(readonly, copy) NSDictionary *devicesByUDID;
- (id)description;
- (void)saveToDisk;
- (void)processDeviceSetPlist;
- (id)initWithSetPath:(id)arg1 serviceContext:(id)arg2;
- (id)init;
- (BOOL)subscribeToNotificationsWithError:(id *)arg1;

@end

@interface SimProfilesPathMonitor : NSObject
{
    NSObject<OS_dispatch_queue> *_monitorQueue;
    NSMutableArray *_leafMonitorSources;
    NSMutableDictionary *_monitoredPathsDict;
    SimServiceContext *_serviceContext;
}

+ (id)profilesPathMonitorForContext:(id)arg1;
@property(nonatomic) __weak SimServiceContext *serviceContext; // @synthesize serviceContext=_serviceContext;
@property(retain, nonatomic) NSMutableDictionary *monitoredPathsDict; // @synthesize monitoredPathsDict=_monitoredPathsDict;
@property(retain, nonatomic) NSMutableArray *leafMonitorSources; // @synthesize leafMonitorSources=_leafMonitorSources;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *monitorQueue; // @synthesize monitorQueue=_monitorQueue;
//- (void).cxx_destruct;
- (void)_monitorProfilesSubDirectory:(int)arg1 path:(id)arg2 updateBlock:(CDUnknownBlockType)arg3;
- (void)_monitorProfilesDirectory:(int)arg1 path:(id)arg2 forSubDirectory:(id)arg3 updateBlock:(CDUnknownBlockType)arg4;
- (void)_monitorProfilesDirectory:(int)arg1 path:(id)arg2;
- (void)_monitorProfilesParentDirectory:(int)arg1 nextPathComponent:(id)arg2 path:(id)arg3;
- (void)_monitorProfilesPath:(id)arg1;
- (void)fence;
@property(readonly, copy) NSArray *monitoredPaths;
- (void)monitorProfilesPath:(id)arg1;
- (void)monitorDefaultProfilePaths;
- (id)initWithContext:(id)arg1;
- (id)init;

@end

@interface SimDevicePair : NSObject <SimDeviceNotifier>
{
    BOOL _active;
    BOOL _connected;
    NSUUID *_UUID;
    SimDevice *_gizmo;
    SimDevice *_companion;
    SimDeviceSet *_deviceSet;
    NSObject<OS_dispatch_queue> *_pairingStateQueue;
    NSMutableArray *_disconnectSources;
    unsigned long long _gizmoNotificationRegID;
    unsigned long long _companionNotificationRegID;
    NSObject<OS_dispatch_queue> *_stateVariableQueue;
    SimDeviceNotificationManager *_notificationManager;
}

+ (BOOL)testPossiblePairingWithDeviceTypeA:(id)arg1 RuntimeA:(id)arg2 DeviceTypeB:(id)arg3 RuntimeB:(id)arg4 error:(id *)arg5;
+ (id)SimDevicePairWithUUID:(id)arg1 gizmo:(id)arg2 companion:(id)arg3 active:(BOOL)arg4 connected:(BOOL)arg5 deviceSet:(id)arg6;
@property(retain, nonatomic) SimDeviceNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *stateVariableQueue; // @synthesize stateVariableQueue=_stateVariableQueue;
@property(nonatomic) unsigned long long companionNotificationRegID; // @synthesize companionNotificationRegID=_companionNotificationRegID;
@property(nonatomic) unsigned long long gizmoNotificationRegID; // @synthesize gizmoNotificationRegID=_gizmoNotificationRegID;
@property(retain, nonatomic) NSMutableArray *disconnectSources; // @synthesize disconnectSources=_disconnectSources;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *pairingStateQueue; // @synthesize pairingStateQueue=_pairingStateQueue;
@property(nonatomic) __weak SimDeviceSet *deviceSet; // @synthesize deviceSet=_deviceSet;
@property(retain, nonatomic) SimDevice *companion; // @synthesize companion=_companion;
@property(retain, nonatomic) SimDevice *gizmo; // @synthesize gizmo=_gizmo;
@property(copy, nonatomic) NSUUID *UUID; // @synthesize UUID=_UUID;
//- (void).cxx_destruct;
- (void)endPairedDeviceMonitoring;
- (void)ONPSQ_endPairedDeviceMonitoring;
- (void)beginPairedDeviceMonitoring;
- (void)ONPSQ_setActiveOnPairedDevices;
- (void)ONPSQ_disconnectIPCRelayOnDevices;
- (void)ONPSQ_connectIPCRelayOnDevices;
- (void)addDisconnectMonitorPort:(unsigned int)arg1;
- (void)setConnected:(BOOL)arg1;
@property(readonly, nonatomic) BOOL connected;
@property(nonatomic) BOOL active;
- (void)setActiveAsyncWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;
- (BOOL)setActiveWithError:(id *)arg1;
- (void)handleXPCNotificationPairConnectionStateChanged:(id)arg1;
- (void)handleXPCNotificationPairSetActive:(id)arg1;
- (void)handleXPCNotification:(id)arg1;
- (void)handleXPCRequestPairSetActive:(id)arg1 peer:(id)arg2;
- (void)handleXPCRequest:(id)arg1 peer:(id)arg2;
- (id)newDevicePairNotification;
- (id)createXPCNotification:(const char *)arg1;
- (id)createXPCRequest:(const char *)arg1;
- (long long)compare:(id)arg1;
- (id)description;
- (BOOL)unregisterNotificationHandler:(unsigned long long)arg1 error:(id *)arg2;
- (unsigned long long)registerNotificationHandlerOnQueue:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (unsigned long long)registerNotificationHandler:(CDUnknownBlockType)arg1;
- (void)invalidate;
- (id)initWithUUID:(id)arg1 gizmo:(id)arg2 companion:(id)arg3 active:(BOOL)arg4 connected:(BOOL)arg5 deviceSet:(id)arg6;
- (id)init;

@end

@interface SimDevicePasteboardConnection : NSObject
{
    NSMachPort *_pasteboardSupportPort;
}

@property(retain, nonatomic) NSMachPort *pasteboardSupportPort; // @synthesize pasteboardSupportPort=_pasteboardSupportPort;
//- (void).cxx_destruct;
- (id)convertDataWithType:(id)arg1 data:(id)arg2 toType:(id)arg3 error:(id *)arg4;
- (id)readDataWithType:(id)arg1 itemIndex:(unsigned long long)arg2 changeCount:(unsigned long long)arg3 error:(id *)arg4;
- (unsigned long long)writeDataArray:(id)arg1 dataProviderPort:(id)arg2 error:(id *)arg3;
- (id)readDataArrayWithTypes:(id)arg1 changeCount:(unsigned long long *)arg2 error:(id *)arg3;
- (BOOL)subscribeWithCallbackPort:(id)arg1 changeCount:(unsigned long long *)arg2 itemsDatatypes:(id *)arg3 error:(id *)arg4;
- (id)createPasteboardSupportPortWithDevice:(id)arg1;
- (id)initWithDevice:(id)arg1;

@end

@interface SimNSPasteboard : NSObject <SimPasteboard>
{
    unsigned long long _refreshResolveCount;
    NSObject<OS_dispatch_queue> *_nsPasteboardQueue;
    NSObject<OS_dispatch_source> *_pollPastboardChangeTimer;
    NSArray *_items;
    unsigned long long _changeCount;
//    NSPasteboard *_nsPasteboard;
    SimDeviceNotificationManager *_notificationManager;
}

+ (id)pasteboardForNSPasteboard:(id)arg1 refreshResolveCount:(unsigned long long)arg2;
@property(retain, nonatomic) SimDeviceNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
//@property(retain, nonatomic) NSPasteboard *nsPasteboard; // @synthesize nsPasteboard=_nsPasteboard;
@property unsigned long long changeCount; // @synthesize changeCount=_changeCount;
@property(retain) NSArray *items; // @synthesize items=_items;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *pollPastboardChangeTimer; // @synthesize pollPastboardChangeTimer=_pollPastboardChangeTimer;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *nsPasteboardQueue; // @synthesize nsPasteboardQueue=_nsPasteboardQueue;
@property unsigned long long refreshResolveCount; // @synthesize refreshResolveCount=_refreshResolveCount;
//- (void).cxx_destruct;
- (BOOL)unregisterNotificationHandler:(unsigned long long)arg1 error:(id *)arg2;
- (unsigned long long)registerNotificationHandlerOnQueue:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (unsigned long long)registerNotificationHandler:(CDUnknownBlockType)arg1;
- (unsigned long long)setPasteboardWithItems:(id)arg1 error:(id *)arg2;
- (void)setPasteboardAsyncWithItems:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)sendPasteboardChangedNotification;
- (void)refreshItemsFromNSPasteboard;
- (id)description;
- (void)dealloc;
- (id)initWithNSPasteboard:(id)arg1 refreshResolveCount:(unsigned long long)arg2;
- (id)init;

@end

@interface SimRuntimePairingReuirements : NSObject
{
    unsigned int _minOSVersion;
    NSArray *_supportedProductFamilies;
    unsigned long long _maxPairs;
}

@property(nonatomic) unsigned long long maxPairs; // @synthesize maxPairs=_maxPairs;
@property(copy, nonatomic) NSArray *supportedProductFamilies; // @synthesize supportedProductFamilies=_supportedProductFamilies;
@property(nonatomic) unsigned int minOSVersion; // @synthesize minOSVersion=_minOSVersion;
//- (void).cxx_destruct;

@end

@interface SimRuntime : NSObject
{
    BOOL _isXcodeBundled;
    unsigned int _version;
    unsigned int _minHostVersion;
    unsigned int _maxHostVersion;
    unsigned int _minCoreSimulatorFrameworkVersion;
    unsigned int _maxCoreSimulatorFrameworkVersion;
    NSString *_name;
    NSString *_identifier;
    NSBundle *_bundle;
    NSString *_root;
    NSString *_versionString;
    NSString *_buildVersionString;
    NSString *_platformIdentifier;
    NSString *_platformName;
    NSDictionary *_supportedFeatures;
    NSDictionary *_supportedFeaturesConditionalOnDeviceType;
    NSDictionary *_requiredHostServices;
    NSDictionary *_forwardHostNotifications;
    NSDictionary *_forwardHostNotificationsWithState;
    NSString *_platformPath;
    NSArray *_supportedProductFamilyIDs;
    SimRuntimePairingReuirements *_pairingRequirements;
    NSArray *_preferredPairingDeviceTypes;
    NSDictionary *_environment_extra;
    void *_libLaunchHostHandle;
    NSDictionary *_aliases;
}

+ (id)updatedMaxCoreSimulatorVersions;
+ (id)updatedMaxHostVersions;
+ (id)supportedRuntimesByAlias;
+ (id)supportedRuntimesByIdentifier;
+ (id)supportedRuntimes;
@property(nonatomic) unsigned int maxCoreSimulatorFrameworkVersion; // @synthesize maxCoreSimulatorFrameworkVersion=_maxCoreSimulatorFrameworkVersion;
@property(nonatomic) unsigned int minCoreSimulatorFrameworkVersion; // @synthesize minCoreSimulatorFrameworkVersion=_minCoreSimulatorFrameworkVersion;
@property(nonatomic) unsigned int maxHostVersion; // @synthesize maxHostVersion=_maxHostVersion;
@property(nonatomic) unsigned int minHostVersion; // @synthesize minHostVersion=_minHostVersion;
@property(copy, nonatomic) NSDictionary *aliases; // @synthesize aliases=_aliases;
@property(nonatomic) void *libLaunchHostHandle; // @synthesize libLaunchHostHandle=_libLaunchHostHandle;
@property(copy, nonatomic) NSDictionary *environment_extra; // @synthesize environment_extra=_environment_extra;
@property(nonatomic) BOOL isXcodeBundled; // @synthesize isXcodeBundled=_isXcodeBundled;
@property(copy, nonatomic) NSArray *preferredPairingDeviceTypes; // @synthesize preferredPairingDeviceTypes=_preferredPairingDeviceTypes;
@property(retain, nonatomic) SimRuntimePairingReuirements *pairingRequirements; // @synthesize pairingRequirements=_pairingRequirements;
@property(copy, nonatomic) NSArray *supportedProductFamilyIDs; // @synthesize supportedProductFamilyIDs=_supportedProductFamilyIDs;
@property(copy, nonatomic) NSString *platformPath; // @synthesize platformPath=_platformPath;
@property(copy, nonatomic) NSDictionary *forwardHostNotificationsWithState; // @synthesize forwardHostNotificationsWithState=_forwardHostNotificationsWithState;
@property(copy, nonatomic) NSDictionary *forwardHostNotifications; // @synthesize forwardHostNotifications=_forwardHostNotifications;
@property(copy, nonatomic) NSDictionary *requiredHostServices; // @synthesize requiredHostServices=_requiredHostServices;
@property(copy, nonatomic) NSDictionary *supportedFeaturesConditionalOnDeviceType; // @synthesize supportedFeaturesConditionalOnDeviceType=_supportedFeaturesConditionalOnDeviceType;
@property(copy, nonatomic) NSDictionary *supportedFeatures; // @synthesize supportedFeatures=_supportedFeatures;
@property(nonatomic) unsigned int version; // @synthesize version=_version;
@property(copy, nonatomic) NSString *platformName; // @synthesize platformName=_platformName;
@property(copy, nonatomic) NSString *platformIdentifier; // @synthesize platformIdentifier=_platformIdentifier;
@property(copy, nonatomic) NSString *buildVersionString; // @synthesize buildVersionString=_buildVersionString;
@property(copy, nonatomic) NSString *versionString; // @synthesize versionString=_versionString;
@property(copy, nonatomic) NSString *root; // @synthesize root=_root;
@property(retain, nonatomic) NSBundle *bundle; // @synthesize bundle=_bundle;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
//- (void).cxx_destruct;
- (id)platformRuntimeOverlay;
- (CDUnknownFunctionPointerType)launch_sim_set_death_handler;
- (CDUnknownFunctionPointerType)launch_sim_waitpid;
- (CDUnknownFunctionPointerType)launch_sim_spawn;
- (CDUnknownFunctionPointerType)launch_sim_getenv;
- (CDUnknownFunctionPointerType)launch_sim_bind_session_to_port;
- (CDUnknownFunctionPointerType)launch_sim_find_endpoint;
- (CDUnknownFunctionPointerType)launch_sim_unregister_endpoint;
- (CDUnknownFunctionPointerType)launch_sim_register_endpoint;
- (BOOL)isAvailableWithError:(id *)arg1;
@property(readonly, nonatomic) BOOL available;
- (id)dyld_simPath;
- (BOOL)createInitialContentPath:(id)arg1 error:(id *)arg2;
- (id)sampleContentPath;
- (long long)compare:(id)arg1;
- (BOOL)supportsFeatureConditionally:(id)arg1;
- (BOOL)supportsFeature:(id)arg1;
- (BOOL)supportsDeviceType:(id)arg1;
- (id)environment;
- (id)description;
- (id)initWithBundle:(id)arg1;
- (id)initWithPath:(id)arg1;
- (id)init;

@end

@interface NSDictionary (SimEnvp)
- (void)sim_freeEnvp:(char **)arg1;
@property(readonly, nonatomic) char **sim_envp;
@end

//@interface NSPasteboardItem (NSObject)
//- (BOOL)setSimPBItemValue:(id)arg1 forType:(id)arg2;
//@end

@interface NSString (SIMCPUType)
+ (id)sim_stringForCPUType:(int)arg1;
- (int)sim_cpuType;
@end

@interface NSString (SimServiceContextExtras)
- (BOOL)realPathHasPrefix:(id)arg1;
- (id)realPath;
@end

@interface NSKeyedUnarchiver (SimPasteboardItem)
+ (id)sim_securelyUnarchiveObjectWithData:(id)arg1;
@end

@interface NSUserDefaults (SimDefaults)
+ (id)simulatorDefaults;
@end

@interface NSArray (SimArgv)
- (void)sim_freeArgv:(char **)arg1;
@property(readonly, nonatomic) char **sim_argv;
@end

@interface NSKeyedArchiver (SimPasteboardItem)
+ (id)sim_securelyArchivedDataWithRootObject:(id)arg1;
@end

@interface NSError (SimError)
+ (id)errorFromXPCData:(id)arg1;
+ (id)errorWithSimPairingTestResult:(long long)arg1;
+ (id)errorWithLaunchdError:(int)arg1 userInfo:(id)arg2;
+ (id)errorWithLaunchdError:(int)arg1 localizedDescription:(id)arg2;
+ (id)errorWithLaunchdError:(int)arg1;
+ (id)errorWithSimErrno:(int)arg1 localizedDescription:(id)arg2;
+ (id)errorWithSimErrno:(int)arg1 userInfo:(id)arg2;
+ (id)errorWithSimErrno:(int)arg1;
@property(readonly, nonatomic) NSObject<OS_xpc_object> *xpcData;
@end

@interface NSString (SIMPackedVersion)
+ (id)sim_stringForPackedVersion:(unsigned int)arg1;
- (unsigned int)sim_packedVersion;
@end

