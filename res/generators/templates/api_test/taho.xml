<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<API>
	<MODULE name="Megatest" parent="Rho">
		<HELP_OVERVIEW>is used to either navigate to a URL or call a javascript function when an attached card reader decodes data.</HELP_OVERVIEW>
		<MORE_HELP>Only the foreground RhoElements application is given access to the card reader hardware, when an application is sent to the background its state will be saved and it will automatically relinquish control of the card reader.  When brought back to the foreground, an application previously using the card reader will have its previous configuration (eg. pinTimeout) reapplied to the card reader automatically.</MORE_HELP>
	    <TEMPLATES>
	    	<SINGLETON_INSTANCES/> <!-- produce enumerate() fabric method, all instances is singletones by ID, add ID property -->
	    	<DEFAULT_INSTANCE/> <!-- object has default static property, all methods can be call by static way (called from default instance), produce default(), set_default() methods -->
	    	<PROPERTY_BAG/> <!-- object has properties, produce getProps(), setProps() methods -->
	    </TEMPLATES>	
		<PROPERTIES> <!-- list of properties supported by property bag methods getPops(), setProps() -->
			<DESC>object supports this properties bla bla bla :</DESC>
			<PROPERTY name="type" type="STRING">
				<DESC>possible value - "hardware"/"software"</DESC>
			</PROPERTY>
			<PROPERTY name="supported_codes" type="ARRAY">
				<DESC>ARRAY of STRING with all supported barcode codes by this recognizer</DESC>
			</PROPERTY>
		</PROPERTIES>	
		<METHODS>
          <% is_factory = ["false", "true"]
          has_callback = ["none", "optional", "mandatory"]
          run_in_thread = ["false", "true"]
          run_in_ui_thread = ["false", "true"]
          has_return = [false, true]
          access = ["instance", "static"]

          access.each do |method_access|
             has_return.each do |method_has_return|
                run_in_ui_thread.each do |method_run_in_ui_thread|
                   run_in_thread.each do |method_run_in_thread|
                      has_callback.each do |method_has_callback|
                         is_factory.each do |method_is_factory|
                            method_name = method_access
                            method_attributes = ''
                            if method_access != access[0]
                               method_attributes = method_attributes + ' access="'+method_access+'"'
                            end
                            if method_run_in_ui_thread != run_in_ui_thread[0]
                               method_attributes = method_attributes + ' run_in_ui_thread="true"'
                               method_name = method_name+"_runInUIThread"
                            else
                               method_name = method_name+"_notRunInUIThread"
                            end

                            if method_run_in_thread != run_in_thread[0]
                               method_attributes = method_attributes + ' run_in_thread="true"'
                                method_name = method_name+"_runInThread"
                            else
                                method_name = method_name+"_notRunInThread"
                            end

                            if method_has_callback != has_callback[0]
                               method_attributes = method_attributes + ' has_callback="'+method_has_callback+'"'
                                method_name = method_name+"_hasCallback"+ method_has_callback
                            else
                                method_name = method_name+"_notHasCallback"
                            end

                            if method_is_factory != is_factory[0]
                               method_attributes = method_attributes + ' factory="true"'
                               method_name = method_name+"_isFactory"
                            else
                               method_name = method_name+"_notFactory"
                            end

                            #if !method_is_factory
                              if method_has_return
                                 method_name = method_name+"_hasReturn"
                              else
                                 method_name = method_name+"_noReturn"
                              end
                            #end
          %>

          <METHOD name="<%= method_name %>_paramset_01" <%= method_attributes %> >
              <DESC><%= method_name %> method help</DESC>
              <PARAMS>
                  <PARAM name="param1" type="STRING">
                          <DESC>string param</DESC>
                  </PARAM>
              </PARAMS>

          <%
              if method_is_factory
              else
                 if method_has_return
              %>
              <RETURN type="STRING">
                  <DESC>
                      Some text that the user can read.  Also note: The actual type returned will depend on what properties the user requested but the generator will just eval() the string returned so does not need to know information on return type.  Marshalled code from C can be used to determine the actual type.  Dmitry to put XML together.
                  </DESC>
               </RETURN>
          <% end
         end %>
        </METHOD>

          <METHOD name="<%= method_name %>_paramset_02" <%= method_attributes %> >
              <DESC><%= method_name %> method help</DESC>
              <PARAMS>
                  <PARAM name="param1" type="STRING">
                          <DESC>string param</DESC>
                  </PARAM>
                  <PARAM name="param2" type="ARRAY">
                          <DESC>array param</DESC>
                  </PARAM>
              </PARAMS>

          <%
              if method_is_factory
              else
                 if method_has_return
              %>
              <RETURN>
                  <DESC>
                      Some text that the user can read.  Also note: The actual type returned will depend on what properties the user requested but the generator will just eval() the string returned so does not need to know information on return type.  Marshalled code from C can be used to determine the actual type.  Dmitry to put XML together.
                  </DESC>
                  <POSSIBILITY type="STRING">
                      <DESC>string result</DESC>
                  </POSSIBILITY>
                  <POSSIBILITY type="NIL">
                      <DESC>if not any codes was recognized on image</DESC>
                  </POSSIBILITY>
              </RETURN>
              <% end
             end %>

          </METHOD>
          <METHOD name="<%= method_name %>_paramset_03" <%= method_attributes %> >
              <DESC><%= method_name %> method help</DESC>
              <PARAMS>
                  <PARAM name="param1" type="STRING">
                          <DESC>string param</DESC>
                  </PARAM>
                  <PARAM name="param2" type="HASH">
                          <DESC>hash param</DESC>
                  </PARAM>
              </PARAMS>

          <%
              if method_is_factory
              else
                 if method_has_return
              %>
              <RETURN>
                  <DESC>
                      Some text that the user can read.  Also note: The actual type returned will depend on what properties the user requested but the generator will just eval() the string returned so does not need to know information on return type.  Marshalled code from C can be used to determine the actual type.  Dmitry to put XML together.
                  </DESC>
                  <POSSIBILITY type="HASH">
                      <DESC>string result</DESC>
                  </POSSIBILITY>
                  <POSSIBILITY type="NIL">
                      <DESC>if not any codes was recognized on image</DESC>
                  </POSSIBILITY>
              </RETURN>
              <% end
             end %>
          </METHOD>

          <METHOD name="<%= method_name %>_paramset_04" <%= method_attributes %> >
              <DESC><%= method_name %> method help</DESC>

          <%
              if method_is_factory
              else
                 if method_has_return
              %>
              <RETURN>
                  <DESC>
                      Some text that the user can read.  Also note: The actual type returned will depend on what properties the user requested but the generator will just eval() the string returned so does not need to know information on return type.  Marshalled code from C can be used to determine the actual type.  Dmitry to put XML together.
                  </DESC>
                  <POSSIBILITY type="ARRAY">
                      <DESC>string result</DESC>
                  </POSSIBILITY>
                  <POSSIBILITY type="NIL">
                      <DESC>if not any codes was recognized on image</DESC>
                  </POSSIBILITY>
              </RETURN>
              <% end
               end %>
          </METHOD>

          <METHOD name="<%= method_name %>_paramset_05" <%= method_attributes %> >
              <DESC><%= method_name %> method help</DESC>
              <PARAMS>
                  <PARAM name="param1" type="ARRAY">
                          <DESC>array param</DESC>
                  </PARAM>
                  <PARAM name="param2" type="STRING">
                          <DESC>hash param</DESC>
                  </PARAM>
              </PARAMS>
          <%
              if method_is_factory
              else
                 if method_has_return
              %>
              <RETURN>
                  <DESC type="STRING">
                      Some text that the user can read.  Also note: The actual type returned will depend on what properties the user requested but the generator will just eval() the string returned so does not need to know information on return type.  Marshalled code from C can be used to determine the actual type.  Dmitry to put XML together.
                  </DESC>
              </RETURN>
               <% end
              end %>
          </METHOD>
          <METHOD name="<%= method_name %>_paramset_06" <%= method_attributes %> >
              <DESC><%= method_name %> method help</DESC>
              <PARAMS>
                  <PARAM name="param1" type="STRING">
                          <DESC>string param</DESC>
                  </PARAM>
                  <PARAM name="param2" type="ARRAY">
                          <DESC>array param</DESC>
                  </PARAM>
                  <PARAM name="param3" type="HASH">
                          <DESC>hash param</DESC>
                  </PARAM>
                  <PARAM name="param4" type="HASH">
                    <CAN_BE_NIL>
                        <DESC>can be nil</DESC>
                    </CAN_BE_NIL>
                  </PARAM>
              </PARAMS>
          <%
              if method_is_factory
              else
                 if method_has_return
              %>
              <RETURN>
                  <DESC type="STRING">
                      Some text that the user can read.  Also note: The actual type returned will depend on what properties the user requested but the generator will just eval() the string returned so does not need to know information on return type.  Marshalled code from C can be used to determine the actual type.  Dmitry to put XML together.
                  </DESC>
              </RETURN>
               <% end
              end %>
          </METHOD>

                       <% end
                      end
                   end
                end
             end
           end %>
		</METHODS>
		<USER_OVERVIEW> <!--  More conversational style with INLINE SAMPLES, written in MarkDown -->
			<![CDATA[
		The following example sets up the card reader to call a javascript function upon successful decoding. The javascript
						function will be called 3 times, once with the raw card data, once with just the pan data extracted
						from the raw card data, and once with the encrypted pan data if the pin has been supplied by the
						user within 10s.:</DESC>
					<html><head>
	
					<script language="javascript" type="text/javascript">
						function doTransaction(data, mode)
						{
							switch(mode) {
							case 'CR':
								alert('Card: '+data);
								break;
							case 'ENCDATA':
								alert('Encoded data: '+data);
								break;
							case 'MESSAGE':
								alert('Error: '+data);
								break;
							case 'PAN':
								alert('PAN data: '+data);
								alert('Please turn the unit over and enter the PIN');
								break;
							}
						}
					</script>
					</head>
					<body>
					</body>
					</html>
	
					You must have the appropriate drivers installed on your device to use the CardReader.  You will see which drivers are installed in the RhoElements log file after you attempt to use any of the card reader functions in RhoElements.  All necessary drivers should be included as part of the platform for supported devices.
	
					]]>
					
		</USER_OVERVIEW>	
		<VER_INTRODUCED>1.0.0</VER_INTRODUCED>
		<PLATFORM><!--  This section is used for the supported platform images at the top --></PLATFORM>
	</MODULE>
</API>