<?xml version = "1.0"?>
<?xml-stylesheet type="text/xsl" href="pb_help.xsl"?>
<HELPPAGE>
	<FUNC>
    <ACTIVEX>Generic</ACTIVEX>
		<NAME>Generic</NAME>
		<PATH>legacyObjects</PATH>
		<TYPE>Preexisting JavaScript Object</TYPE>
		<SYNOPSIS>contains read only properties and methods which do not belong to a specific module.  If you have configured 'PreloadLegacyGeneric' to be '1' the Javascript object 'generic' will be inserted automatically into your page's DOM by RhoElements.</SYNOPSIS>
		<SYNTAX>
			<USAGE>
				<EXAMPLE>generic.Log('Message to be logged', 1);</EXAMPLE>
			</USAGE>
			<USAGE>
				<EXAMPLE>var myOEM = generic.OEMInfo;</EXAMPLE>
			</USAGE>
		</SYNTAX>
		<ACTIVEX_METHODS>
			<METHOD>
				<NAME>InvokeMETAFunction</NAME>
				<DESC>Invokes the specified meta function immediately.</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Module Name</NAME>
						<VALUES>String</VALUES>
						<DESC>Module on which to perform the method or apply the property.  This would be placed in the 'HTTP-Equiv' part of the Meta tag if it was being parsed on a page.</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Content</NAME>
						<VALUES>Method or Property</VALUES>
						<DESC>The method or Property to be applied to the module.</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>N/A</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>Log</NAME>
				<DESC>Invokes a user defined type log entry using the standard RhoElements logger component.  With this invocation RhoElements will log to either a text file or HTTP as defined in the configuration settings.</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Log Entry</NAME>
						<VALUES>String</VALUES>
						<DESC>The string to log (this will be written to the log as user data)</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Severity</NAME>
						<VALUES>1, 2 or 3</VALUES>
						<DESC>1 is low severity, 2 is medium severity, 3 is high priority</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>A boolean value to indicate success or failure or the log operation</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>LaunchProcess</NAME>
				<DESC>Launches a new process which blocks execution until the process terminates. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>FileName to launch</NAME>
						<VALUES>String</VALUES>
						<DESC>Filename of the application to execute</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Commandline</NAME>
						<VALUES>String</VALUES>
						<DESC>Optional command line parameters</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>The return code of the launched process</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>LaunchProcessNonBlocking</NAME>
				<DESC>Launches a new process which does not block execution. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>FileName to launch</NAME>
						<VALUES>String</VALUES>
						<DESC>Filename of the application to execute</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Commandline</NAME>
						<VALUES>String</VALUES>
						<DESC>Optional command line parameters</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>The launched process handle</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>CloseProcess</NAME>
				<DESC>Closes the handle opened by LaunchProcessNonBlocking. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Handle To close</NAME>
						<VALUES>object</VALUES>
						<DESC>Handle returned by LaunchProcessNonBlocking</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>N/A</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>GetProcessExitCode</NAME>
				<DESC>Retrieves the exit code of a previously run LaunchProcessNonBlocking call. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Handle to Get</NAME>
						<VALUES>object</VALUES>
						<DESC>Process handle returned by previously called LaunchProcessNonBlocking</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>Return value of the process specified by the process handle</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>WaitProcess</NAME>
				<DESC>Waits for the process started by LaunchProcessNonBlocking to terminate or it times out. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Process Handle</NAME>
						<VALUES>object</VALUES>
						<DESC>Handle returned by LaunchProcessNonBlocking</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Timeout Value</NAME>
						<VALUES>Seconds</VALUES>
						<DESC>Time to wait before method times out.  A value of 0 will return immediately and can be used to determine if the process has completed or not.</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>True if the process terminated or False if the timeout expired</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>SetRegistrySetting</NAME>
				<DESC>Configures the specified registry setting on the device. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Hive</NAME>
						<VALUES>String</VALUES>
						<DESC>The Hive name (HKEY_CLASSES_ROOT = 0, HKEY_CURRENT_USER = 1, HKEY_LOCAL_MACHINE = 2, HKEY_USERS = 3) </DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Type</NAME>
						<VALUES>String</VALUES>
						<DESC>The type of registry entry (REG_SZ = 1, REG_BINARY = 3, REG_DWORD = 4, REG_MULTI_SZ = 7)</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Key</NAME>
						<VALUES>String</VALUES>
						<DESC>The Name of the key to set</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Setting</NAME>
						<VALUES>String</VALUES>
						<DESC>The name of the sub key to be set</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Setting</NAME>
						<VALUES>String</VALUES>
						<DESC>The string value to be set</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>N/A</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>GetRegistrySetting</NAME>
				<DESC>Retrieves the specified registry setting. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Hive</NAME>
						<VALUES>Number</VALUES>
						<DESC>The hive name (HKEY_CLASSES_ROOT = 0, HKEY_CURRENT_USER = 1, HKEY_LOCAL_MACHINE = 2, HKEY_USERS = 3)</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>SubKey</NAME>
						<VALUES>String</VALUES>
						<DESC>The name of the sub key to be retrieved</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Setting</NAME>
						<VALUES>String</VALUES>
						<DESC>The name of the setting within the sub key</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>The data held in the specified registry setting</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>PlayWave</NAME>
				<DESC>plays the specified WAV file. On Android, only files on the device's SDCard partition can be played.</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Filename</NAME>
						<VALUES>String</VALUES>
						<DESC>The name of the WAV file to play.  If the specified file does not exist the default sound will be played unless specified by the flags.</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Flags</NAME>
						<VALUES>Number</VALUES>
						<DESC>Flags for playing the file.  The flags can be combined, see remarks</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>A boolean value to indicate success or failure of the operation.  Note that synchronous sounds will block until they have finished playing.</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>ReadConfigSetting</NAME>
				<DESC>reads a setting from the configuration file. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Setting</NAME>
						<VALUES>See Configuration Settings Help Page</VALUES>
						<DESC>A setting identifier</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Application Name</NAME>
						<VALUES>String</VALUES>
						<DESC>The name of the RhoElements application as specified in config.xml.  When writing to a global setting this should be omitted or 'GLOBAL' used.</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>A string which when evaluated creates an array of returned strings.</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>WriteConfigSetting</NAME>
				<DESC>Writes a setting to the configuration file.  Configuration changes will only take effect after RhoElements is re-started. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Setting</NAME>
						<VALUES>See Configuration Settings Help Page</VALUES>
						<DESC>A setting identifier</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Value</NAME>
						<VALUES>String</VALUES>
						<DESC>The value to set.</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Application Name</NAME>
						<VALUES>String</VALUES>
						<DESC>The name of the RhoElements application as specified in config.xml.  When writing to a global setting this should be omitted or 'GLOBAL' used.</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>A boolean value to indicate whether or not the write was successful</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>ReadUserSetting</NAME>
				<DESC>Reads a custom setting stored in the configuration file. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Setting</NAME>
						<VALUES>String</VALUES>
						<DESC>The name of the setting to be read</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>The read value as a string or 'Undefined if the setting can not be found</DESC>
				</RETURN>
			</METHOD>
			<METHOD>
				<NAME>WriteUserSetting</NAME>
				<DESC>Writes a custom setting to the configuration file.  Configuration changes will only take effect after RhoElements is re-started. (Not supported on Android)</DESC>
				<PARAMETERS>
					<PARAMETER>
						<NAME>Setting</NAME>
						<VALUES>String</VALUES>
						<DESC>The name of the setting to be stored</DESC>
					</PARAMETER>
					<PARAMETER>
						<NAME>Value</NAME>
						<VALUES>String</VALUES>
						<DESC>The value to write</DESC>
					</PARAMETER>
				</PARAMETERS>
				<RETURN>
					<DESC>A boolean value to indicate success or failure of the operation</DESC>
				</RETURN>
			</METHOD>
		</ACTIVEX_METHODS>
		<ACTIVEX_RETURNS>
			<RETVAL>
				<NAME>OEMInfo</NAME>
				<DESC>The OEM Information string for the terminal</DESC>
			</RETVAL>
			<RETVAL>
				<NAME>UUID</NAME>
				<DESC>The Unique Unit IDentifier for the terminal</DESC>
			</RETVAL>
		</ACTIVEX_RETURNS>
		<EXAMPLES>
			<EXAMPLE>
				<DESC>The Following example shows usage of the Generic object:</DESC>
<CODE>
&lt;script&gt;
   //  Log some data as low severity
   generic.Log('Scanner data successfully received',1);
   //  Retrieve the type of terminal
   var myTerminal = generic.OEMInfo;
   //  Retrieve the UUID of the terminal
   var myUUID = generic.UUID;
   //  Play a wave file
   generic.PlayWave('\\windows\\alarm1.wav', 1);
&lt;/script&gt;
</CODE>
			</EXAMPLE>
			<EXAMPLE>
				<DESC>The Following example shows usage of Invoke Meta Function:</DESC>
<CODE>
&lt;script&gt;
   //  Enable the scanner
   generic.InvokeMETAFunction('Scanner', 'Enable');
   //  Configure the Scanner
   generic.InvokeMETAFunction('Scanner', 'all_decoders:disabled; ean8:enabled; Enabled');
   //  Show the signature capture window
   generic.InvokeMETAFunction('SignatureCapture', 'Visibility:Visible');
   //  Show and configure the battery icon
   generic.InvokeMETAFunction('Battery', 'Left:50; Top:50; IconPosition:Bottom; color:#FF0000; visibility:visible');
&lt;/script&gt;
</CODE>
			</EXAMPLE>
			<EXAMPLE>
				<DESC>The Following example shows usage of the Generic object when controlling processes:</DESC>
<CODE>
&lt;script&gt;
   //  Launch CtlPanel (blocking)
   var exitCode1 = generic.LaunchProcess('\\application\\ctlpanel.exe', '');
   
   //  Launch CtlPanel and see if the user closes it before 5 seconds
   var hProcess = generic.LaunchProcessNonBlocking('\\application\\ctlpanel.exe', '');
   var bRetVal = generic.WaitProcess(hProcess, 5);
   if (bRetVal)
   {
      var exitCode2 = generic.GetProcessExitCode(hProcess);
      alert('Process Ended by User: ' + exitCode2);
   }
   else
      alert('Process Still Running');
   generic.CloseProcess(hProcess);
&lt;/script&gt;
</CODE>
			</EXAMPLE>
			<EXAMPLE>
				<DESC>The Following example shows usage of the Generic object for interfacing with the registry:</DESC>
<CODE>
&lt;script&gt;
   //  Write a registry setting
   var REG_SZ = 1;
   var HKEY_LOCAL_MACHINE = 2;
   var szWrittenData = "Fred";
   generic.SetRegistrySetting(HKEY_LOCAL_MACHINE, REG_SZ, "Software\\Symbol\\MySettings", "Name", szWrittenData);
   
   //  Read back the previously written setting
   var szReadData = generic.GetRegistrySetting(HKEY_LOCAL_MACHINE, "Software\\Symbol\\MySettings",  "Name");
&lt;/script&gt;
</CODE>
			</EXAMPLE>
			<EXAMPLE>
				<DESC>The Following example shows usage of the Generic object for reading / writing configuration settings:</DESC>
<CODE>
&lt;script&gt;
   //  Read the FULLSCREEN setting and alert it to the user.
   var Ret = generic.ReadConfigSetting("FULLSCREEN");
   eval("var arrRet = "+Ret);
   if(arrRet.length){
    alert(arrRet[0]);
   }
   
   //  Show an alert with the scrollbar setting for an application named "Menu".
   var Ret = generic.ReadConfigSetting("SCROLLBARSENABLED","Menu");
   eval("var arrRet = "+Ret);
   if(arrRet.length){
    alert(arrRet[0]);
   }
   
   //  Show an alert for each preload in the application named "Menu".
   var loop;
   var Ret = generic.ReadConfigSetting("PRELOAD","Menu");
   eval("var arrRet = "+Ret);
   for(loop=0;loop &lt; arrRet.length;loop++){
      alert(arrRet[loop]);
   }
   
   //  Set fullscreen off in the configuration file.
   var Ret = generic.WriteConfigSetting("FULLSCREEN","0");
   if(Ret=='true'){
    alert("Setting saved and will take place on the next RhoElements re-start");
   }
   
   //  Turn the scrollbars setting off for the application named "Menu".
   var Ret = generic.WriteConfigSetting("SCROLLBARSENABLED","0","Menu");
   if(Ret=='true'){
    alert("Setting saved and will take place on the next RhoElements re-start");
   }
&lt;/script&gt;
</CODE>
			</EXAMPLE>
			<EXAMPLE>
				<DESC>The Following example shows usage of the Generic object for reading / writing user settings:</DESC>
<CODE>
&lt;script&gt;
   //  Write the string 'red' to the custom setting 'bgcolor'
   var Ret = generic.WriteUserSetting("BgColor","red");
   if(Ret=='true'){
    alert("Custom setting saved");
   }

   //  Retrieve the value we have just written
   var Ret = generic.ReadUserSetting("BgColor");
   alert("background color is "+Ret);
&lt;/script&gt;
</CODE>
			</EXAMPLE>
		</EXAMPLES>
		<REMARKS>
			<COMMENT>
				<COMMENT_HEADING>Play Flags</COMMENT_HEADING>
				<COMMENT_DATA>Flags are as follows:</COMMENT_DATA>
<COMMENTFIXEDWIDTH>
0x00000000 = Play synchronously (default on all but Android).  The function returns after the sound event completes. (Not supported on Android)
0x00000001 = The sound is played asynchronously (default on Android).  To terminate an asynchronously played waveform 
             sound, call PlayWave with strSound set to null.
0x00000002 = No default sound event is used. If the sound cannot be found, PlayWave returns 
             silently without playing the default sound. (Not applicable on Android)
0x00000004 = A sound event's file is loaded in RAM. The parameter specified by strSound must point 
             to an image of a sound in memory. (Not applicable on Android)
0x00000008 = The sound plays repeatedly until PlayWave is called again with the strSound parameter 
             set to null. You must also specify the 0x00000001 flag to indicate an asynchronous 
             sound event.
0x00000010 = The specified sound event will yield to another sound event that is already playing. 
             If a sound cannot be played because the resource needed to generate that sound is 
             busy playing another sound, the function immediately returns without playing the 
             requested sound.  If this flag is not specified, PlaySound attempts to stop the 
             currently playing sound so that the device can be used to play the new sound.
</COMMENTFIXEDWIDTH>
			</COMMENT>
			<COMMENT>
				<COMMENT_HEADING>PlayWave on Android</COMMENT_HEADING>
				<COMMENT_DATA>Please be aware that the PlayWave API is provided for backwards compatibility with RhoElements 1, which only has file access with the SDCard. This means that all files played with PlayWave must be located in the /mnt/sdcard/ folder. There are two other APIs available for playing sound files which do not have this limitation: Rho.Mediaplayer.start available in Rhodes and RhoElements from version 4.0+ and mediaPlayer.start which is a RhoElements 2.2 API.</COMMENT_DATA>
			</COMMENT>
			<COMMENT>
				<COMMENT_HEADING>Backwards Compatibility</COMMENT_HEADING>
				<COMMENT_DATA>The generic Pre-existing Javascript Object provides backwards compatibility with code written for Browser and also supports the syntax below.  Because RhoElements inserts the object 'generic' on the page automatically when 'PreloadLegacyGeneric' is configured to be '1' you can not create your own objects by this name, see below:</COMMENT_DATA>
<COMMENTFIXEDWIDTH>
&lt;script&gt;
  //  Old Browser syntax supported by the Generic Object
  var gen = new ActiveXObject("PocketBrowser.Generic"); 
  
  //  Note: var generic = new ... will fail because the object already exists on the page.
  gen.Log('My Log Data', 1);
&lt;/script&gt;
</COMMENTFIXEDWIDTH>
			</COMMENT>
		</REMARKS>
		<ADDITIONAL>
			<PLATFORM>All supported devices</PLATFORM>
			<APPLIES>Immediate - These methods are actioned immediately.</APPLIES>
			<REQ>None.</REQ>
			<VER_INTRODUCED>1.0.0</VER_INTRODUCED>
		</ADDITIONAL>
		<SEEALSO>
			<TOPIC RELPATH="../Getting Started/">ConfigurationSettings</TOPIC>
		</SEEALSO>
	</FUNC>
</HELPPAGE>

